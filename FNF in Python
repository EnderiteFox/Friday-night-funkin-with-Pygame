from pygame import *
import json
from random import *
import time as Time
import cProfile

init()

# region loading
# region screen and loading screen
screen = display.set_mode((0, 0), FULLSCREEN)
mouse.set_visible(False)
middleScreen = (display.Info().current_w // 2, display.Info().current_h // 2)


def loadingscreen(progress):
    screen.fill((0, 0, 0))
    temp = font.SysFont("Comic Sans MS", 100).render("Loading...", 1, (255, 255, 255))
    temp1 = temp.get_rect()
    temp1.center = (middleScreen[0], middleScreen[1])
    screen.blit(temp, temp1)

    draw.line(screen, (255, 255, 255), (95, display.Info().current_h - 95),
              (display.Info().current_w - 95, display.Info().current_h - 95), 3)
    draw.line(screen, (255, 255, 255), (95, display.Info().current_h - 155),
              (display.Info().current_w - 95, display.Info().current_h - 155), 3)
    draw.line(screen, (255, 255, 255), (95, display.Info().current_h - 95), (95, display.Info().current_h - 155), 3)
    draw.line(screen, (255, 255, 255), (display.Info().current_w - 95, display.Info().current_h - 95),
              (display.Info().current_w - 95, display.Info().current_h - 155), 3)
    if progress > 0:
        temp = (display.Info().current_w - 200) / 4
        draw.rect(screen, (255, 255, 255), Rect(100, display.Info().current_h - 150, temp * progress, 50))

    display.flip()


loadingscreen(0)
# endregion

# region variables
Inst = None
Vocals = None
chart = None
speed = 1.6
useMustHitSection = False
clock = time.Clock()
if 640 > display.Info().current_h - 640:
    singlePlayer = True
else:
    singlePlayer = False

fpsQuality = 100
fpsList = []
fpsTime = Time.time()

misses = 0
accuracy = 0
accuracyDisplayTicks = 0
showAccuracy = False

Font40 = font.SysFont("Comic Sans MS", 40)
# endregion

# region images loading
arrowsSkins = [transform.scale(image.load("assets\Images\Purple left arrow.png").convert_alpha(), (150, 150)),
               transform.scale(image.load("assets\Images\Blue down arrow.png").convert_alpha(), (150, 150)),
               transform.scale(image.load("assets\Images\Green up arrow.png").convert_alpha(), (150, 150)),
               transform.scale(image.load("assets\Images\Red right arrow.png").convert_alpha(), (150, 150))]
pressedArrowsSkins = [transform.scale(image.load("assets\Images\left pressed arrow.png").convert_alpha(), (150, 150)),
                      transform.scale(image.load("assets\Images\down pressed arrow.png").convert_alpha(), (150, 150)),
                      transform.scale(image.load("assets\Images\green up pressed arrow.png").convert_alpha(),
                                      (150, 150)),
                      transform.scale(image.load("assets\Images\image right pressed arrow.png").convert_alpha(),
                                      (150, 150))]

arrowRect = arrowsSkins[0].get_rect()

greyArrow = transform.scale(image.load("assets\Images\Strum line arrow modified.png").convert_alpha(), (150, 150))

greyArrow = [transform.rotate(greyArrow, 90), transform.rotate(greyArrow, 180), greyArrow,
             transform.rotate(greyArrow, -90)]

musicList = json.load(open("assets/MusicList.json"))["musics"]

loadingscreen(1)


# endregion

# region music and chart loading
def open_file(music):
    global Inst
    global Vocals
    global chart
    Inst = mixer.Sound("assets\Musics\{0}\Inst.ogg".format(music))
    Vocals = mixer.Sound("assets\Musics\{0}\Voices.ogg".format(music))
    chart = json.load(open("assets\Musics\{0}\chart.json".format(music)))["song"]["notes"]


def play(music=False):
    if not music:
        open_file(musicList[randint(0, len(musicList) - 1)])
    else:
        open_file(music)


play("Quaoar")

loadingscreen(2)


# endregion

# region chart managment
class Note:
    def __init__(self, pos, column, side):
        self.pos = pos
        self.column = column
        self.side = side


# region tests if chart uses mustHitSection
notesChart = []

for section in chart:
    if not section["mustHitSection"]:
        useMustHitSection = True
# endregion

# region create notes
# Column meaning:
#   If not useMustHitSection:
#       0 = player left
#       1 = player down
#       2 = player up
#       3 = player right
#       4 = opponent down
#       5 = opponent left
#       6 = opponent up
#       7 = opponent right
#
#   If useMustHitSection:
#       If mustHit:
#           0 = player left
#           1 = player down
#           2 = player up
#           3 = player right
#       If not mustHit:
#           0 = opponent down
#           1 = opponent left
#           2 = opponent up
#           3 = opponent right
#           4 = player left
#           5 = player down
#           6 = player up
#           7 = player right

for section in chart:
    if not useMustHitSection:
        tempMustHit = True
    else:
        tempMustHit = section["mustHitSection"]
    for note in section["sectionNotes"]:
        tempUser = ""
        tempDirection = ""
        if not useMustHitSection:
            if 3 >= note[1] >= 0:
                tempUser = "Player"
            elif 7 >= note[1] >= 4:
                tempUser = "Opponent"
            if note[1] == 0 or note[1] == 5:
                tempDirection = "Left"
            if note[1] == 1 or note[1] == 4:
                tempDirection = "Down"
            if note[1] == 2 or note[1] == 6:
                tempDirection = "Up"
            if note[1] == 3 or note[1] == 7:
                tempDirection = "Right"
        if useMustHitSection:
            if tempMustHit:
                if 3 >= note[1] >= 0:
                    tempUser = "Player"
                if 7 >= note[1] >= 4:
                    tempUser = "Opponent"
                if note[1] == 0 or note[1] == 4:
                    tempDirection = "Left"
                if note[1] == 1 or note[1] == 5:
                    tempDirection = "Down"
                if note[1] == 2 or note[1] == 6:
                    tempDirection = "Up"
                if note[1] == 3 or note[1] == 7:
                    tempDirection = "Right"
            if not tempMustHit:
                if 3 >= note[1] >= 0:
                    tempUser = "Opponent"
                if 7 >= note[1] >= 4:
                    tempUser = "Player"
                if note[1] == 1 or note[1] == 5:
                    tempDirection = "Down"
                if note[1] == 0 or note[1] == 4:
                    tempDirection = "Left"
                if note[1] == 2 or note[1] == 6:
                    tempDirection = "Up"
                if note[1] == 3 or note[1] == 7:
                    tempDirection = "Right"
        notesChart.append(Note(note[0], tempDirection, tempUser))
# endregion

loadingscreen(3)

# region sort notes
temp = notesChart
notesChart = []

for k in range(len(temp)):
    min = temp[0].pos
    minX = 0
    for x in range(len(temp)):
        if temp[x].pos < min:
            min = temp[x].pos
            minX = x
    notesChart.append(temp[minX])
    temp.remove(temp[minX])

loadingscreen(4)


# endregion
# endregion
# endregion

# region screen and notes update
def drawGreyNotes():
    width = display.Info().current_w
    temp = arrowRect
    temp.topright = (width - 540, 50)
    if K_a in keyPressed or K_LEFT in keyPressed:
        screen.blit(pressedArrowsSkins[0], temp)
    else:
        screen.blit(greyArrow[0], temp)
    temp = arrowRect
    temp.topright = (width - 380, 50)
    if K_s in keyPressed or K_DOWN in keyPressed:
        screen.blit(pressedArrowsSkins[1], temp)
    else:
        screen.blit(greyArrow[1], temp)
    temp = arrowRect
    temp.topright = (width - 220, 50)
    if K_w in keyPressed or K_UP in keyPressed:
        screen.blit(pressedArrowsSkins[2], temp)
    else:
        screen.blit(greyArrow[2], temp)
    temp = arrowRect
    temp.topright = (width - 60, 50)
    if K_d in keyPressed or K_RIGHT in keyPressed:
        screen.blit(pressedArrowsSkins[3], temp)
    else:
        screen.blit(greyArrow[3], temp)
    if not singlePlayer:
        temp = arrowRect
        temp.topleft = (60, 50)
        screen.blit(greyArrow[0], temp)
        temp = arrowRect
        temp.topleft = (220, 50)
        screen.blit(greyArrow[1], temp)
        temp = arrowRect
        temp.topleft = (380, 50)
        screen.blit(greyArrow[2], temp)
        temp = arrowRect
        temp.topleft = (540, 50)
        screen.blit(greyArrow[3], temp)


def drawNotes():
    global misses
    currentTime = Time.time() - startTime
    width = display.Info().current_w
    renderNotes = True
    for note in notesChart:
        if renderNotes:
            if note.side == "Opponent" and currentTime * 1000 >= note.pos:
                notesChart.remove(note)
            if currentTime * 1000 - 133 >= note.pos and note.side == "Player" and note.column in ["Left", "Down", "Up",
                                                                                                  "Right"]:
                notesChart.remove(note)
                misses += 1
            if 50 + (note.pos - currentTime * 1000) * speed < display.Info().current_h + 100:
                if not singlePlayer:
                    if note.side == "Opponent" and note.column == "Down":
                        temp = arrowRect
                        temp.topleft = (220, 50 + (note.pos - currentTime * 1000) * speed)
                        screen.blit(arrowsSkins[1], temp)
                    elif note.side == "Opponent" and note.column == "Left":
                        temp = arrowRect
                        temp.topleft = (60, 50 + (note.pos - currentTime * 1000) * speed)
                        screen.blit(arrowsSkins[0], temp)
                    elif note.side == "Opponent" and note.column == "Up":
                        temp = arrowRect
                        temp.topleft = (380, 50 + (note.pos - currentTime * 1000) * speed)
                        screen.blit(arrowsSkins[2], temp)
                    elif note.side == "Opponent" and note.column == "Right":
                        temp = arrowRect
                        temp.topleft = (540, 50 + (note.pos - currentTime * 1000) * speed)
                        screen.blit(arrowsSkins[3], temp)
                if note.side == "Player" and note.column == "Down":
                    temp = arrowRect
                    temp.topright = (width - 380, 50 + (note.pos - currentTime * 1000) * speed)
                    screen.blit(arrowsSkins[1], temp)
                elif note.side == "Player" and note.column == "Left":
                    temp = arrowRect
                    temp.topright = (width - 540, 50 + (note.pos - currentTime * 1000) * speed)
                    screen.blit(arrowsSkins[0], temp)
                elif note.side == "Player" and note.column == "Up":
                    temp = arrowRect
                    temp.topright = (width - 220, 50 + (note.pos - currentTime * 1000) * speed)
                    screen.blit(arrowsSkins[2], temp)
                elif note.side == "Player" and note.column == "Right":
                    temp = arrowRect
                    temp.topright = (width - 60, 50 + (note.pos - currentTime * 1000) * speed)
                    screen.blit(arrowsSkins[3], temp)

            else:
                renderNotes = False


# endregion


keyPressed = []

Inst.play()
Vocals.play()

startTime = Time.time()

while True:
    notesToClear = [[], [], [], []]
    for events in event.get():
        if events.type == QUIT or (events.type == KEYDOWN and events.key == K_ESCAPE):
            quit()
            exit()
        if events.type == KEYDOWN:
            keyPressed.append(events.key)
        if events.type == KEYDOWN and events.key == K_SPACE:
            print("Debug: Current song position: {0}".format((Time.time() - startTime) * 1000))
        if events.type == KEYUP:
            keyPressed.remove(events.key)
        if events.type == KEYDOWN:
            currentTime = Time.time() - startTime
            testNotes = True
            for note in notesChart:
                if testNotes:
                    if note.pos <= currentTime * 1000 + 133:
                        if note.side == "Player" and currentTime * 1000 - 133 <= note.pos <= currentTime * 1000 + 133:
                            if (events.key == K_a or events.key == K_LEFT) and note.column == "Left":
                                notesToClear[0].append(note)
                            if (events.key == K_s or events.key == K_DOWN) and note.column == "Down":
                                notesToClear[1].append(note)
                            if (events.key == K_w or events.key == K_UP) and note.column == "Up":
                                notesToClear[2].append(note)
                            if (events.key == K_d or events.key == K_RIGHT) and note.column == "Right":
                                notesToClear[3].append(note)
                    else:
                        testNotes = False
    currentTime = Time.time() - startTime
    for k in range(4):
        if len(notesToClear[k]) > 0:
            min = notesToClear[k][0].pos
            minX = 0
            x = 0
            for element in notesToClear[k]:
                if element.pos < min:
                    min = element.pos
                    minX = x
                x += 1
            accuracy = str(round(notesToClear[k][minX].pos - currentTime * 1000, 2))
            showAccuracy = True
            accuracyDisplayTicks = Time.time()
            notesChart.remove(notesToClear[k][minX])
    screen.fill((0, 0, 0))
    drawGreyNotes()
    drawNotes()
    # region draw bottom info bar
    temp = Font40.render("Misses: {0}".format(misses), 1, (255, 255, 255))
    temp1 = temp.get_rect()
    temp1.midbottom = (middleScreen[0], display.Info().current_h - 5)
    screen.blit(temp, temp1)
    # endregion
    # region accuracy display
    if Time.time() - accuracyDisplayTicks > 0.5:
        showAccuracy = False
    if showAccuracy:
        temp = Font40.render(accuracy, 1, (255, 255, 255))
        temp1 = temp.get_rect()
        temp1.center = (middleScreen[0], middleScreen[1])
        screen.blit(temp, temp1)
    # endregion
    # region FPS
    fps = 1 / (Time.time() - fpsTime)
    fpsTime = Time.time()
    fpsList.append(fps)
    temp = 0
    for element in fpsList:
        temp += element
    temp /= len(fpsList)
    while len(fpsList) > fpsQuality:
        fpsList.remove(fpsList[0])
    screen.blit(Font40.render(str(round(temp, 2)), 1, (255, 255, 255)), Rect(5, 0, 0, 0))
    # endregion
    display.flip()
